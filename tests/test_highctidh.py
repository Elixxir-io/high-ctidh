#!/usr/bin/env python3

import unittest
from highctidh import ctidh
import ctypes

# Python static 511 vectors (generated by an earlier version of this program)
python_alice_sk_511_vector = bytes.fromhex("ff01000503f801020003fffe0401fd000501fe030002fc03fffc00fc00000104fb00fe02040200000003feff0100ff0101000100fffe0302fffeff000301010100ff0100ffff00000100")
python_alice_pk_511_vector = bytes.fromhex("27e65081c09f7dee63101e78309ef0ec892342435f04f237194d3fcef22fd850875fae3b7237d0d5952b9ab6351571967c6d0ba219158ee276192adc3a177713")
python_bob_sk_511_vector = bytes.fromhex("040000fdfafeff0003fffffa01fdfe02fe03fffc00ffff00fb030201fefd02fd01fe010300fd0202020300020101000100fa03ff00000000fd00ff030201020000000103000001010100")
python_bob_pk_511_vector = bytes.fromhex("1c025d14327ca5dcad356f5f96df318c1d04434c554b7e79fc9a9a0c15e1f9b81665d5db19d5c1417dd0c7a31160db09b117817bb297faed7a068fb491627920")
python_ss_511_vector = bytes.fromhex("5ecc8e5159cdb3bfac9281e183d9b3cbf2e289c28dee69f99b2fd840f141686fb133a3a40360a4e6056230a649be57b4e045b4c28c5558f80f57f85b43bbaf33")

# Golang static 512 vectors
# From https://git.xx.network/elixxir/ctidh_cgo/-/blob/master/vectors_test.go
golang_alice_sk_512_vector = bytes.fromhex("0500ff0500fbfc04020a04010001050701ff01fcfc00fbff00fd010601fc00fffefd01f901f700fe000401ff0306fdff000102ff000204fdfd02ff01fc0000010401fd0000fffeff0500")
golang_alice_pk_512_vector = bytes.fromhex("a9f14cf61e8c8b9bf701c704ed66324ec3813eb7869106d636e4f72b09ac07e44979d45634f616ae12d876aec0de546f21cd9219d47e07da0929ec456d939338")
golang_bob_sk_512_vector = bytes.fromhex("06fc0009fc01ff0201060304fcf501010004020104fd02fff8fefffc0103030100ffff040304ff0102fa0002ff000101fafdfe03ff0400fe01fa00fd0101ff03fe020101030200ff0001")
golang_bob_pk_512_vector = bytes.fromhex("1e4a6a12ae0218f3eda0213d28e640bf4e39a56847b0374576cb02a18219d7c64ea7e87414ce20eb45566f6cf6243e8fb6f4554e5553e6d4418b4ca609ff6c3a")
golang_ss_512_vector = bytes.fromhex("24081588d4f3232f788e4e65db4870a223942ad272722a70577c26533c93adcd798cd166f26bfbafa6d6e428bf502a98e753a5a17ba2669869b2082f50266932")

# Python static 512 vectors (generated by an earlier version of this program)
python_alice_sk_512_vector = bytes.fromhex("fcfbfd01f6090104fe09ff0502040000060100fcfefc06ff04060000ff03fe010300010307ff01040201020006020000fcfefd01fe0000fdf9fdff040104000201fe0001fd020201fe00")
python_alice_pk_512_vector = bytes.fromhex("f0e3123870580f84f10e269a5150baaaf7058a6f0437cb8678c5ad6a0dddd3355c76435ae054a873e76bf5f8bc58ec29053d02162c7d3f309764443e2a3f0f38")
python_bob_sk_512_vector = bytes.fromhex("02f90009ff06ff03fb0701010501fffafdffff070204fdfefc02fe04fc00060302fefeff01f9020002fffb0000fe02ff00f6030003ff01010105fbfffd01fffe0302fc000101fc000101")
python_bob_pk_512_vector = bytes.fromhex("7369aaee2b543f17655fd57a78e03140b9a7fda3773651920c89fcd2aa9875dd633c3762f39fbda81961c70b0716974352ad5833564c6764ee082f17545b374d")
python_ss_512_vector = bytes.fromhex("0d84960ea3c52ad6264a53915757d1ff8733629914577151140ae28bd28325bc31151ae3a1447e0d68aae42abcc63dae249072a8e729678ab73fd333b32a7a3d")

# Python static 1024 vectors (generated by an earlier version of this program)
python_alice_sk_1024_vector = bytes.fromhex("000200fffd0000ff03fffe0200010000fd00ff0000fffd010001fe01000001ff00ff020100fe00fffd010100000101feff0100010101fd000000000000fefffffe02000101020000ff0101020000ffffff00000002000001020101ff00ff0200ffff0000000100000000000001ffff00000100fd000000010000fe00ffff00000000")
python_alice_pk_1024_vector = bytes.fromhex("f364c4b220d57528d6b64432e93fb40495177faf9a224955f34b5700cf1cf35be7c476e43681a375602fc57eba16aa0c5c4ae02f3031d55d84c2cb679969074216ca0f114d7c798dc12c65b9820d2dce650070c79f992f34c6653963d62fba82a9f48293940ec6001093a06023ee0b80022d19e33d3a669934cbd289c87ddb01")
python_bob_sk_1024_vector = bytes.fromhex("00fe00fe0101000200fe0002000100fe01000001020200000100ff040000ff000003010002000001010000fc0100010200fe00010000fe000000fe00000201ff000202ffff000000ff00ff0002ff0101fe010000000101ff0001fe00000001000000ff00ff020100000000ff00ffff0000ff00000000ffff0003ff000100ff000000")
python_bob_pk_1024_vector = bytes.fromhex("90d51cc0f48b0ce2712bc8305e7415300bde7feef634e17211ae493ea57b56d1ad81914e85e3b8b43275e7a31c9d440f3f88ef476a31c7e504520f7b538bcbe80fd3bbbc76726c4c37c6c8f9f857618602fcbbc6899e8ac420de32e1ebb1f1178dd13f600afba82276b5f5e6b40dc421b5c3b1f342a9152009b1fae95d372303")
python_ss_1024_vector = bytes.fromhex("b5ab3b4d9cac68c451a43d1b499e190d462788362089ca5f3e4462c1502bb06cc820fe2e46c0f9ddaf8de6fcf8c0b4238e677497ebc6f5bb622a894c3c485c9e16142579392b6af434db46b146416aab5d5bd43c3d0f1bc55755f1af93d137d20540e65fc54e7b2b564dceec6484dc2b8bdd30db2b4ea7ba86adecfcb3e7ba08")

# Python static 2048 vectors (generated by an earlier version of this program)
python_alice_sk_2048_vector = bytes.fromhex("00010000000000000000000000ff000000ffff02ff00000000000000ff000000020000fe01000000000000000001ff0000010000000000ff00000000ff00000100ff0000ff00000001000001000000010000010000000000ff000000ff000001000000000001ff00010000000000ff00000001000000ff0000000000030000ffffff00000000000000000001ff00ff000000000000010100000000ff000000000000ff00020000000000000000ff00000001000000ffff0000000000ff000000000000000100000101000000ff00000000000000000000000000000000ff000000000001000000")
python_alice_pk_2048_vector = bytes.fromhex("b2af3db1d3070879a0a0f4dbabd8c4d4e44536ad3caa22a1e212fffaa9886611b09904ba5e2d889e7aa54186d9b134e01a06da93f5c61b5c035a3d738388a121e3b6774f298fedaca36edfc4f1c5c10153ad40fa8a116f9668189bbbae25c09d42d34703756076e3326c6302dade803bbcdbb6a66650bf3115c72b40d9e71eca2309298a5b2c0469d62c1fa46a956287617395e04e7e3842f71e060ca73738461bb30f2ca3329c2c8bbdce4b4f4b47ef3c851799144003cab417d55988ddbe23920fd92692d00eb3aa1e63d04651ca4e10a885c7af948ebf93dae875152ca10a47feb67d79c7536c941122996a5d81e8ed3306056b2c31048edd3e8bbfa28c38")
python_bob_sk_2048_vector = bytes.fromhex("0000000100000000000000ff00000100ff000000000000000001fe0000010000020000010000ff00000000000100010001000000ff00000100000000ff000000000000000000ffff00000000000000000000ff00fe0000000000ff00000100000000ff000001000000ff00ff000000000000010002000000ff00000001ff0000ff00ff00000000000000000001000000000100000100000001000000ff0000ff010000000000000101ff0000000000000100000100000001000000ff00000000000000010000ff0000ff00000000000000010000000000000000000000000000ff000000010000")
python_bob_pk_2048_vector = bytes.fromhex("135d73849ad45f7e14134b5b550e9700923cdd2f2c6eba69a6a34317120c0fcba202b171924ff08eaa6b0c7635b457e9d5e3ce2a09ea562704166d59ca57fb3ae8046a0aa330c60978add40ea6e3c386c4ca3c7b33ef02f8aec3f166c31949e93a30e665c971588faa4eb4ef07f3143fb6c0efd4f7264f1dde8fdb6d277657b2129439b7f01aba57b82efa2c2fe12a637b99a5f974ae08c3ae24a2f70eff86947dbde7f7624b082143ea3e4864afbb3d1a40af0f2e1acc09eb07922d05f99072fdd534f3d96edd09dc642cbc452345a49d0f30b515078a76696bed53c175b436c58bbcfb95893b99f252896bb3d29bb711d401a89969aeaf7b88409c76b4e834")
python_ss_2048_vector = bytes.fromhex("f61ebdb51cff8de704e1940b702b7359f3936f632b9ac33a18d9f58f85153875e14fdc701912cc8717f0cb4c32729bc5eb9dbfc9ef207281103ae381f2ba0553686cbc43c279d1da8897e5fbab50e2a05e38ef7b012a85b856ebb3c1ebd133dc32f710dd6d67f80093b37402e5581f350f09188ac97b2ea7a14fbaa3c5db0bb38036ac2e81e34f1a04fae0fd91b90b3bca1fa3ae5b5bd37e0edebf08d806eb4cd9ab136289c9e86aba3f8839fabec86ae0cdbd794409a6b6f81b3a5c5f9f56da5e9bdeaf8f6d802be6f987ab5772f35b3855291c9ab3b1848d654841a24e014f7a112cf7591d16bf1d33b2d46e4294fca42cacb1c2eacdbe9040ab794906353f")

class TestHighCTIDH(unittest.TestCase):

    def test_511_base_len(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        self.assertEqual(bytes(ctidh511.base), bytes(base))

    def test_511_empty_private_keys(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key()
        bob_private_key = ctidh511.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_511_empty_public_keys(self):
        ctidh511 = ctidh(511)
        alice_public_key = ctidh511.private_key()
        bob_public_key = ctidh511.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_511_random_keys(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key()
        bob_private_key = ctidh511.private_key()
        ctidh511.csidh_private(alice_private_key)
        ctidh511.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_511_validate_pk(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        alice_private_key = ctidh511.private_key()
        ctidh511.csidh_private(alice_private_key)
        alice_public_key = ctidh511.public_key()
        self.assertTrue(ctidh511.validate(alice_public_key))

    def test_511_dynamic(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()

        alice_private_key = ctidh511.private_key()
        bob_private_key = ctidh511.private_key()

        ctidh511.csidh_private(alice_private_key)
        ctidh511.csidh_private(bob_private_key)

        alice_public_key = ctidh511.public_key()
        bob_public_key = ctidh511.public_key()

        self.assertTrue(ctidh511.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh511.validate(alice_public_key))
        self.assertTrue(ctidh511.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh511.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))

        alice_shared_key = ctidh511.public_key()
        bob_shared_key = ctidh511.public_key()
        self.assertTrue(ctidh511.csidh(alice_shared_key, bob_public_key, alice_private_key))
        self.assertTrue(ctidh511.csidh(bob_shared_key, alice_public_key, bob_private_key))
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_511_static_vectors(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        alice_python_public_key = ctidh511.public_key()
        self.assertTrue(ctidh511.csidh(alice_python_public_key, base,
            ctidh511.private_key_from_hex(python_alice_sk_511_vector)))
        self.assertEqual(bytes(alice_python_public_key).hex(), 
                bytes(ctidh511.public_key_from_hex(python_alice_pk_511_vector)).hex())

        bob_python_public_key = ctidh511.public_key()
        self.assertTrue(ctidh511.csidh(bob_python_public_key, base,
            ctidh511.private_key_from_hex(python_bob_sk_511_vector)))
        self.assertEqual(bytes(bob_python_public_key).hex(),
                bytes(ctidh511.public_key_from_hex(python_bob_pk_511_vector)).hex())

        bob_python_shared_key = ctidh511.public_key()
        alice_python_shared_key = ctidh511.public_key()
        self.assertTrue(ctidh511.csidh(alice_python_shared_key, bob_python_public_key,
                ctidh511.private_key_from_hex(python_alice_sk_511_vector)))
        self.assertTrue(ctidh511.csidh(bob_python_shared_key, alice_python_public_key,
                ctidh511.private_key_from_hex(python_bob_sk_511_vector)))

        self.assertEqual(bytes(alice_python_shared_key).hex(), python_ss_511_vector.hex())
        self.assertEqual(bytes(bob_python_shared_key).hex(), python_ss_511_vector.hex())
        self.assertTrue(ctidh511.validate(ctidh511.public_key_from_hex(python_alice_pk_511_vector)))
        self.assertTrue(ctidh511.validate(ctidh511.public_key_from_hex(python_bob_pk_511_vector)))

    def test_512_base_len(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        self.assertEqual(bytes(ctidh512.base), bytes(base))

    def test_512_empty_private_keys(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key()
        bob_private_key = ctidh512.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_512_empty_public_keys(self):
        ctidh512 = ctidh(512)
        alice_public_key = ctidh512.private_key()
        bob_public_key = ctidh512.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_512_random_keys(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key()
        bob_private_key = ctidh512.private_key()
        ctidh512.csidh_private(alice_private_key)
        ctidh512.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_512_validate_pk(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        alice_private_key = ctidh512.private_key()
        ctidh512.csidh_private(alice_private_key)
        alice_public_key = ctidh512.public_key()
        self.assertTrue(ctidh512.validate(alice_public_key))

    def test_512_dynamic(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()

        alice_private_key = ctidh512.private_key()
        bob_private_key = ctidh512.private_key()

        ctidh512.csidh_private(alice_private_key)
        ctidh512.csidh_private(bob_private_key)

        alice_public_key = ctidh512.public_key()
        bob_public_key = ctidh512.public_key()

        self.assertTrue(ctidh512.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh512.validate(alice_public_key))
        self.assertTrue(ctidh512.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh512.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))

        alice_shared_key = ctidh512.public_key()
        bob_shared_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(alice_shared_key, bob_public_key, alice_private_key))
        self.assertTrue(ctidh512.csidh(bob_shared_key, alice_public_key, bob_private_key))
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_512_static_vectors(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        alice_python_public_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(alice_python_public_key, base,
            ctidh512.private_key_from_hex(python_alice_sk_512_vector)))
        self.assertEqual(bytes(alice_python_public_key).hex(), 
                bytes(ctidh512.public_key_from_hex(python_alice_pk_512_vector)).hex())

        bob_python_public_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(bob_python_public_key, base,
            ctidh512.private_key_from_hex(python_bob_sk_512_vector)))
        self.assertEqual(bytes(bob_python_public_key).hex(),
                bytes(ctidh512.public_key_from_hex(python_bob_pk_512_vector)).hex())

        bob_python_shared_key = ctidh512.public_key()
        alice_python_shared_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(alice_python_shared_key, bob_python_public_key,
                ctidh512.private_key_from_hex(python_alice_sk_512_vector)))
        self.assertTrue(ctidh512.csidh(bob_python_shared_key, alice_python_public_key,
                ctidh512.private_key_from_hex(python_bob_sk_512_vector)))

        self.assertEqual(bytes(alice_python_shared_key).hex(), python_ss_512_vector.hex())
        self.assertEqual(bytes(bob_python_shared_key).hex(), python_ss_512_vector.hex())
        self.assertTrue(ctidh512.validate(ctidh512.public_key_from_hex(python_alice_pk_512_vector)))
        self.assertTrue(ctidh512.validate(ctidh512.public_key_from_hex(python_bob_pk_512_vector)))

    def test_512_static_golang_vectors(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()

        alice_public_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(alice_public_key, base,
            ctidh512.private_key_from_hex(golang_alice_sk_512_vector)))
        self.assertEqual(bytes(alice_public_key).hex(), 
                bytes(ctidh512.public_key_from_hex(golang_alice_pk_512_vector)).hex())

        bob_public_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(bob_public_key, base,
            ctidh512.private_key_from_hex(golang_bob_sk_512_vector)))
        self.assertEqual(bytes(bob_public_key).hex(),
                bytes(ctidh512.public_key_from_hex(golang_bob_pk_512_vector)).hex())

        bob_shared_key = ctidh512.public_key()
        alice_shared_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(alice_shared_key, bob_public_key,
                ctidh512.private_key_from_hex(golang_alice_sk_512_vector)))
        self.assertTrue(ctidh512.csidh(bob_shared_key, alice_public_key,
                ctidh512.private_key_from_hex(golang_bob_sk_512_vector)))

        self.assertEqual(bytes(alice_shared_key).hex(), golang_ss_512_vector.hex())
        self.assertEqual(bytes(bob_shared_key).hex(), golang_ss_512_vector.hex())

    def test_1024_base_len(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        self.assertEqual(bytes(ctidh1024.base), bytes(base))

    def test_1024_empty_private_keys(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key()
        bob_private_key = ctidh1024.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_1024_empty_public_keys(self):
        ctidh1024 = ctidh(1024)
        alice_public_key = ctidh1024.private_key()
        bob_public_key = ctidh1024.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_1024_random_keys(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key()
        bob_private_key = ctidh1024.private_key()
        ctidh1024.csidh_private(alice_private_key)
        ctidh1024.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_1024_validate_pk(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        alice_private_key = ctidh1024.private_key()
        ctidh1024.csidh_private(alice_private_key)
        alice_public_key = ctidh1024.public_key()
        self.assertTrue(ctidh1024.validate(alice_public_key))

    def test_1024_dynamic(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()

        alice_private_key = ctidh1024.private_key()
        bob_private_key = ctidh1024.private_key()

        ctidh1024.csidh_private(alice_private_key)
        ctidh1024.csidh_private(bob_private_key)

        alice_public_key = ctidh1024.public_key()
        bob_public_key = ctidh1024.public_key()

        self.assertTrue(ctidh1024.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh1024.validate(alice_public_key))
        self.assertTrue(ctidh1024.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh1024.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))

        alice_shared_key = ctidh1024.public_key()
        bob_shared_key = ctidh1024.public_key()
        self.assertTrue(ctidh1024.csidh(alice_shared_key, bob_public_key, alice_private_key))
        self.assertTrue(ctidh1024.csidh(bob_shared_key, alice_public_key, bob_private_key))
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_1024_static_vectors(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        alice_python_public_key = ctidh1024.public_key()
        self.assertTrue(ctidh1024.csidh(alice_python_public_key, base,
            ctidh1024.private_key_from_hex(python_alice_sk_1024_vector)))
        self.assertEqual(bytes(alice_python_public_key).hex(), 
                bytes(ctidh1024.public_key_from_hex(python_alice_pk_1024_vector)).hex())

        bob_python_public_key = ctidh1024.public_key()
        self.assertTrue(ctidh1024.csidh(bob_python_public_key, base,
            ctidh1024.private_key_from_hex(python_bob_sk_1024_vector)))
        self.assertEqual(bytes(bob_python_public_key).hex(),
                bytes(ctidh1024.public_key_from_hex(python_bob_pk_1024_vector)).hex())

        bob_python_shared_key = ctidh1024.public_key()
        alice_python_shared_key = ctidh1024.public_key()
        self.assertTrue(ctidh1024.csidh(alice_python_shared_key, bob_python_public_key,
                ctidh1024.private_key_from_hex(python_alice_sk_1024_vector)))
        self.assertTrue(ctidh1024.csidh(bob_python_shared_key, alice_python_public_key,
                ctidh1024.private_key_from_hex(python_bob_sk_1024_vector)))

        self.assertEqual(bytes(alice_python_shared_key).hex(), python_ss_1024_vector.hex())
        self.assertEqual(bytes(bob_python_shared_key).hex(), python_ss_1024_vector.hex())
        self.assertTrue(ctidh1024.validate(ctidh1024.public_key_from_hex(python_alice_pk_1024_vector)))
        self.assertTrue(ctidh1024.validate(ctidh1024.public_key_from_hex(python_bob_pk_1024_vector)))

    def test_2048_base_len(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        self.assertEqual(bytes(ctidh2048.base), bytes(base))

    def test_2048_empty_private_keys(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key()
        bob_private_key = ctidh2048.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_2048_empty_public_keys(self):
        ctidh2048 = ctidh(2048)
        alice_public_key = ctidh2048.private_key()
        bob_public_key = ctidh2048.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_2048_random_keys(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key()
        bob_private_key = ctidh2048.private_key()
        ctidh2048.csidh_private(alice_private_key)
        ctidh2048.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_2048_validate_pk(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        alice_private_key = ctidh2048.private_key()
        ctidh2048.csidh_private(alice_private_key)
        alice_public_key = ctidh2048.public_key()
        self.assertTrue(ctidh2048.validate(alice_public_key))

    def test_2048_dynamic(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()

        alice_private_key = ctidh2048.private_key()
        bob_private_key = ctidh2048.private_key()

        ctidh2048.csidh_private(alice_private_key)
        ctidh2048.csidh_private(bob_private_key)

        alice_public_key = ctidh2048.public_key()
        bob_public_key = ctidh2048.public_key()

        self.assertTrue(ctidh2048.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh2048.validate(alice_public_key))
        self.assertTrue(ctidh2048.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh2048.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))

        alice_shared_key = ctidh2048.public_key()
        bob_shared_key = ctidh2048.public_key()
        self.assertTrue(ctidh2048.csidh(alice_shared_key, bob_public_key, alice_private_key))
        self.assertTrue(ctidh2048.csidh(bob_shared_key, alice_public_key, bob_private_key))
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_2048_static_vectors(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        alice_python_public_key = ctidh2048.public_key()
        self.assertTrue(ctidh2048.csidh(alice_python_public_key, base,
            ctidh2048.private_key_from_hex(python_alice_sk_2048_vector)))
        self.assertEqual(bytes(alice_python_public_key).hex(), 
                bytes(ctidh2048.public_key_from_hex(python_alice_pk_2048_vector)).hex())

        bob_python_public_key = ctidh2048.public_key()
        self.assertTrue(ctidh2048.csidh(bob_python_public_key, base,
            ctidh2048.private_key_from_hex(python_bob_sk_2048_vector)))
        self.assertEqual(bytes(bob_python_public_key).hex(),
                bytes(ctidh2048.public_key_from_hex(python_bob_pk_2048_vector)).hex())

        bob_python_shared_key = ctidh2048.public_key()
        alice_python_shared_key = ctidh2048.public_key()
        self.assertTrue(ctidh2048.csidh(alice_python_shared_key, bob_python_public_key,
                ctidh2048.private_key_from_hex(python_alice_sk_2048_vector)))
        self.assertTrue(ctidh2048.csidh(bob_python_shared_key, alice_python_public_key,
                ctidh2048.private_key_from_hex(python_bob_sk_2048_vector)))

        self.assertEqual(bytes(alice_python_shared_key).hex(), python_ss_2048_vector.hex())
        self.assertEqual(bytes(bob_python_shared_key).hex(), python_ss_2048_vector.hex())
        self.assertTrue(ctidh2048.validate(ctidh2048.public_key_from_hex(python_alice_pk_2048_vector)))
        self.assertTrue(ctidh2048.validate(ctidh2048.public_key_from_hex(python_bob_pk_2048_vector)))


if __name__== '__main__':
    unittest.main()
